name: libdispatch Windows clang

on:
  push:
    branches: [ $default-branch ]
  pull_request:
    branches: [ $default-branch ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  C_COMPILER: clang
  CPP_COMPILER: clang++

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{env.CPP_COMPILER}} -DCMAKE_C_COMPILER=${{env.C_COMPILER}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/out --config ${{env.BUILD_TYPE}}

    - name: Upload artifact windows-release-${{ steps.vars.outputs.sha_short }}.zip
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v1
      with:
        name: windows-release-${{ steps.vars.outputs.sha_short }}
        path: ./out
